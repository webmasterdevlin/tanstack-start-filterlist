
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TeamMember` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TeamMember
 * 
 */
export type TeamMemberModel = runtime.Types.Result.DefaultSelection<Prisma.$TeamMemberPayload>

export type AggregateTeamMember = {
  _count: TeamMemberCountAggregateOutputType | null
  _min: TeamMemberMinAggregateOutputType | null
  _max: TeamMemberMaxAggregateOutputType | null
}

export type TeamMemberMinAggregateOutputType = {
  id: string | null
  projectId: string | null
  role: string | null
}

export type TeamMemberMaxAggregateOutputType = {
  id: string | null
  projectId: string | null
  role: string | null
}

export type TeamMemberCountAggregateOutputType = {
  id: number
  projectId: number
  role: number
  _all: number
}


export type TeamMemberMinAggregateInputType = {
  id?: true
  projectId?: true
  role?: true
}

export type TeamMemberMaxAggregateInputType = {
  id?: true
  projectId?: true
  role?: true
}

export type TeamMemberCountAggregateInputType = {
  id?: true
  projectId?: true
  role?: true
  _all?: true
}

export type TeamMemberAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeamMember to aggregate.
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMembers to fetch.
   */
  orderBy?: Prisma.TeamMemberOrderByWithRelationInput | Prisma.TeamMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TeamMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TeamMembers
  **/
  _count?: true | TeamMemberCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TeamMemberMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TeamMemberMaxAggregateInputType
}

export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
      [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTeamMember[P]>
    : Prisma.GetScalarType<T[P], AggregateTeamMember[P]>
}




export type TeamMemberGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TeamMemberWhereInput
  orderBy?: Prisma.TeamMemberOrderByWithAggregationInput | Prisma.TeamMemberOrderByWithAggregationInput[]
  by: Prisma.TeamMemberScalarFieldEnum[] | Prisma.TeamMemberScalarFieldEnum
  having?: Prisma.TeamMemberScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TeamMemberCountAggregateInputType | true
  _min?: TeamMemberMinAggregateInputType
  _max?: TeamMemberMaxAggregateInputType
}

export type TeamMemberGroupByOutputType = {
  id: string
  projectId: string
  role: string
  _count: TeamMemberCountAggregateOutputType | null
  _min: TeamMemberMinAggregateOutputType | null
  _max: TeamMemberMaxAggregateOutputType | null
}

type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
      }
    >
  > 



export type TeamMemberWhereInput = {
  AND?: Prisma.TeamMemberWhereInput | Prisma.TeamMemberWhereInput[]
  OR?: Prisma.TeamMemberWhereInput[]
  NOT?: Prisma.TeamMemberWhereInput | Prisma.TeamMemberWhereInput[]
  id?: Prisma.StringFilter<"TeamMember"> | string
  projectId?: Prisma.StringFilter<"TeamMember"> | string
  role?: Prisma.StringFilter<"TeamMember"> | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}

export type TeamMemberOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
}

export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TeamMemberWhereInput | Prisma.TeamMemberWhereInput[]
  OR?: Prisma.TeamMemberWhereInput[]
  NOT?: Prisma.TeamMemberWhereInput | Prisma.TeamMemberWhereInput[]
  projectId?: Prisma.StringFilter<"TeamMember"> | string
  role?: Prisma.StringFilter<"TeamMember"> | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}, "id">

export type TeamMemberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  role?: Prisma.SortOrder
  _count?: Prisma.TeamMemberCountOrderByAggregateInput
  _max?: Prisma.TeamMemberMaxOrderByAggregateInput
  _min?: Prisma.TeamMemberMinOrderByAggregateInput
}

export type TeamMemberScalarWhereWithAggregatesInput = {
  AND?: Prisma.TeamMemberScalarWhereWithAggregatesInput | Prisma.TeamMemberScalarWhereWithAggregatesInput[]
  OR?: Prisma.TeamMemberScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TeamMemberScalarWhereWithAggregatesInput | Prisma.TeamMemberScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TeamMember"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"TeamMember"> | string
  role?: Prisma.StringWithAggregatesFilter<"TeamMember"> | string
}

export type TeamMemberCreateInput = {
  id?: string
  role: string
  project: Prisma.ProjectCreateNestedOneWithoutTeamMembersInput
}

export type TeamMemberUncheckedCreateInput = {
  id?: string
  projectId: string
  role: string
}

export type TeamMemberUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutTeamMembersNestedInput
}

export type TeamMemberUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TeamMemberCreateManyInput = {
  id?: string
  projectId: string
  role: string
}

export type TeamMemberUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TeamMemberUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TeamMemberListRelationFilter = {
  every?: Prisma.TeamMemberWhereInput
  some?: Prisma.TeamMemberWhereInput
  none?: Prisma.TeamMemberWhereInput
}

export type TeamMemberOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TeamMemberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type TeamMemberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type TeamMemberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  role?: Prisma.SortOrder
}

export type TeamMemberCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.TeamMemberCreateWithoutProjectInput, Prisma.TeamMemberUncheckedCreateWithoutProjectInput> | Prisma.TeamMemberCreateWithoutProjectInput[] | Prisma.TeamMemberUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TeamMemberCreateOrConnectWithoutProjectInput | Prisma.TeamMemberCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.TeamMemberCreateManyProjectInputEnvelope
  connect?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
}

export type TeamMemberUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.TeamMemberCreateWithoutProjectInput, Prisma.TeamMemberUncheckedCreateWithoutProjectInput> | Prisma.TeamMemberCreateWithoutProjectInput[] | Prisma.TeamMemberUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TeamMemberCreateOrConnectWithoutProjectInput | Prisma.TeamMemberCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.TeamMemberCreateManyProjectInputEnvelope
  connect?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
}

export type TeamMemberUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.TeamMemberCreateWithoutProjectInput, Prisma.TeamMemberUncheckedCreateWithoutProjectInput> | Prisma.TeamMemberCreateWithoutProjectInput[] | Prisma.TeamMemberUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TeamMemberCreateOrConnectWithoutProjectInput | Prisma.TeamMemberCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.TeamMemberUpsertWithWhereUniqueWithoutProjectInput | Prisma.TeamMemberUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.TeamMemberCreateManyProjectInputEnvelope
  set?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  disconnect?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  delete?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  connect?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  update?: Prisma.TeamMemberUpdateWithWhereUniqueWithoutProjectInput | Prisma.TeamMemberUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.TeamMemberUpdateManyWithWhereWithoutProjectInput | Prisma.TeamMemberUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.TeamMemberScalarWhereInput | Prisma.TeamMemberScalarWhereInput[]
}

export type TeamMemberUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.TeamMemberCreateWithoutProjectInput, Prisma.TeamMemberUncheckedCreateWithoutProjectInput> | Prisma.TeamMemberCreateWithoutProjectInput[] | Prisma.TeamMemberUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.TeamMemberCreateOrConnectWithoutProjectInput | Prisma.TeamMemberCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.TeamMemberUpsertWithWhereUniqueWithoutProjectInput | Prisma.TeamMemberUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.TeamMemberCreateManyProjectInputEnvelope
  set?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  disconnect?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  delete?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  connect?: Prisma.TeamMemberWhereUniqueInput | Prisma.TeamMemberWhereUniqueInput[]
  update?: Prisma.TeamMemberUpdateWithWhereUniqueWithoutProjectInput | Prisma.TeamMemberUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.TeamMemberUpdateManyWithWhereWithoutProjectInput | Prisma.TeamMemberUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.TeamMemberScalarWhereInput | Prisma.TeamMemberScalarWhereInput[]
}

export type TeamMemberCreateWithoutProjectInput = {
  id?: string
  role: string
}

export type TeamMemberUncheckedCreateWithoutProjectInput = {
  id?: string
  role: string
}

export type TeamMemberCreateOrConnectWithoutProjectInput = {
  where: Prisma.TeamMemberWhereUniqueInput
  create: Prisma.XOR<Prisma.TeamMemberCreateWithoutProjectInput, Prisma.TeamMemberUncheckedCreateWithoutProjectInput>
}

export type TeamMemberCreateManyProjectInputEnvelope = {
  data: Prisma.TeamMemberCreateManyProjectInput | Prisma.TeamMemberCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type TeamMemberUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.TeamMemberWhereUniqueInput
  update: Prisma.XOR<Prisma.TeamMemberUpdateWithoutProjectInput, Prisma.TeamMemberUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.TeamMemberCreateWithoutProjectInput, Prisma.TeamMemberUncheckedCreateWithoutProjectInput>
}

export type TeamMemberUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.TeamMemberWhereUniqueInput
  data: Prisma.XOR<Prisma.TeamMemberUpdateWithoutProjectInput, Prisma.TeamMemberUncheckedUpdateWithoutProjectInput>
}

export type TeamMemberUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.TeamMemberScalarWhereInput
  data: Prisma.XOR<Prisma.TeamMemberUpdateManyMutationInput, Prisma.TeamMemberUncheckedUpdateManyWithoutProjectInput>
}

export type TeamMemberScalarWhereInput = {
  AND?: Prisma.TeamMemberScalarWhereInput | Prisma.TeamMemberScalarWhereInput[]
  OR?: Prisma.TeamMemberScalarWhereInput[]
  NOT?: Prisma.TeamMemberScalarWhereInput | Prisma.TeamMemberScalarWhereInput[]
  id?: Prisma.StringFilter<"TeamMember"> | string
  projectId?: Prisma.StringFilter<"TeamMember"> | string
  role?: Prisma.StringFilter<"TeamMember"> | string
}

export type TeamMemberCreateManyProjectInput = {
  id?: string
  role: string
}

export type TeamMemberUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TeamMemberUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TeamMemberUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  role?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TeamMemberSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  role?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamMember"]>

export type TeamMemberSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  role?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamMember"]>

export type TeamMemberSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  role?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["teamMember"]>

export type TeamMemberSelectScalar = {
  id?: boolean
  projectId?: boolean
  role?: boolean
}

export type TeamMemberOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "projectId" | "role", ExtArgs["result"]["teamMember"]>
export type TeamMemberInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type TeamMemberIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type TeamMemberIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}

export type $TeamMemberPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TeamMember"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    projectId: string
    role: string
  }, ExtArgs["result"]["teamMember"]>
  composites: {}
}

export type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload, S>

export type TeamMemberCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TeamMemberCountAggregateInputType | true
  }

export interface TeamMemberDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
  /**
   * Find zero or one TeamMember that matches the filter.
   * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
   * @example
   * // Get one TeamMember
   * const teamMember = await prisma.teamMember.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TeamMemberFindUniqueArgs>(args: Prisma.SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
   * @example
   * // Get one TeamMember
   * const teamMember = await prisma.teamMember.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeamMember that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
   * @example
   * // Get one TeamMember
   * const teamMember = await prisma.teamMember.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TeamMemberFindFirstArgs>(args?: Prisma.SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TeamMember that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
   * @example
   * // Get one TeamMember
   * const teamMember = await prisma.teamMember.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TeamMembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TeamMembers
   * const teamMembers = await prisma.teamMember.findMany()
   * 
   * // Get first 10 TeamMembers
   * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const teamMemberWithIdOnly = await prisma.teamMember.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TeamMemberFindManyArgs>(args?: Prisma.SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TeamMember.
   * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
   * @example
   * // Create one TeamMember
   * const TeamMember = await prisma.teamMember.create({
   *   data: {
   *     // ... data to create a TeamMember
   *   }
   * })
   * 
   */
  create<T extends TeamMemberCreateArgs>(args: Prisma.SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TeamMembers.
   * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
   * @example
   * // Create many TeamMembers
   * const teamMember = await prisma.teamMember.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TeamMemberCreateManyArgs>(args?: Prisma.SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TeamMembers and returns the data saved in the database.
   * @param {TeamMemberCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
   * @example
   * // Create many TeamMembers
   * const teamMember = await prisma.teamMember.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TeamMembers and only return the `id`
   * const teamMemberWithIdOnly = await prisma.teamMember.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TeamMemberCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TeamMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TeamMember.
   * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
   * @example
   * // Delete one TeamMember
   * const TeamMember = await prisma.teamMember.delete({
   *   where: {
   *     // ... filter to delete one TeamMember
   *   }
   * })
   * 
   */
  delete<T extends TeamMemberDeleteArgs>(args: Prisma.SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TeamMember.
   * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
   * @example
   * // Update one TeamMember
   * const teamMember = await prisma.teamMember.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TeamMemberUpdateArgs>(args: Prisma.SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TeamMembers.
   * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
   * @example
   * // Delete a few TeamMembers
   * const { count } = await prisma.teamMember.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TeamMemberDeleteManyArgs>(args?: Prisma.SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeamMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TeamMembers
   * const teamMember = await prisma.teamMember.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TeamMemberUpdateManyArgs>(args: Prisma.SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TeamMembers and returns the data updated in the database.
   * @param {TeamMemberUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
   * @example
   * // Update many TeamMembers
   * const teamMember = await prisma.teamMember.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TeamMembers and only return the `id`
   * const teamMemberWithIdOnly = await prisma.teamMember.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TeamMemberUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TeamMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TeamMember.
   * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
   * @example
   * // Update or create a TeamMember
   * const teamMember = await prisma.teamMember.upsert({
   *   create: {
   *     // ... data to create a TeamMember
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TeamMember we want to update
   *   }
   * })
   */
  upsert<T extends TeamMemberUpsertArgs>(args: Prisma.SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma.Prisma__TeamMemberClient<runtime.Types.Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TeamMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
   * @example
   * // Count the number of TeamMembers
   * const count = await prisma.teamMember.count({
   *   where: {
   *     // ... the filter for the TeamMembers we want to count
   *   }
   * })
  **/
  count<T extends TeamMemberCountArgs>(
    args?: Prisma.Subset<T, TeamMemberCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TeamMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TeamMemberAggregateArgs>(args: Prisma.Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

  /**
   * Group by TeamMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TeamMemberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TeamMemberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
      : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TeamMember model
 */
readonly fields: TeamMemberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TeamMember.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TeamMember model
 */
export interface TeamMemberFieldRefs {
  readonly id: Prisma.FieldRef<"TeamMember", 'String'>
  readonly projectId: Prisma.FieldRef<"TeamMember", 'String'>
  readonly role: Prisma.FieldRef<"TeamMember", 'String'>
}
    

// Custom InputTypes
/**
 * TeamMember findUnique
 */
export type TeamMemberFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * Filter, which TeamMember to fetch.
   */
  where: Prisma.TeamMemberWhereUniqueInput
}

/**
 * TeamMember findUniqueOrThrow
 */
export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * Filter, which TeamMember to fetch.
   */
  where: Prisma.TeamMemberWhereUniqueInput
}

/**
 * TeamMember findFirst
 */
export type TeamMemberFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * Filter, which TeamMember to fetch.
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMembers to fetch.
   */
  orderBy?: Prisma.TeamMemberOrderByWithRelationInput | Prisma.TeamMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeamMembers.
   */
  cursor?: Prisma.TeamMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeamMembers.
   */
  distinct?: Prisma.TeamMemberScalarFieldEnum | Prisma.TeamMemberScalarFieldEnum[]
}

/**
 * TeamMember findFirstOrThrow
 */
export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * Filter, which TeamMember to fetch.
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMembers to fetch.
   */
  orderBy?: Prisma.TeamMemberOrderByWithRelationInput | Prisma.TeamMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TeamMembers.
   */
  cursor?: Prisma.TeamMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TeamMembers.
   */
  distinct?: Prisma.TeamMemberScalarFieldEnum | Prisma.TeamMemberScalarFieldEnum[]
}

/**
 * TeamMember findMany
 */
export type TeamMemberFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * Filter, which TeamMembers to fetch.
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TeamMembers to fetch.
   */
  orderBy?: Prisma.TeamMemberOrderByWithRelationInput | Prisma.TeamMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TeamMembers.
   */
  cursor?: Prisma.TeamMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TeamMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TeamMembers.
   */
  skip?: number
  distinct?: Prisma.TeamMemberScalarFieldEnum | Prisma.TeamMemberScalarFieldEnum[]
}

/**
 * TeamMember create
 */
export type TeamMemberCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * The data needed to create a TeamMember.
   */
  data: Prisma.XOR<Prisma.TeamMemberCreateInput, Prisma.TeamMemberUncheckedCreateInput>
}

/**
 * TeamMember createMany
 */
export type TeamMemberCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TeamMembers.
   */
  data: Prisma.TeamMemberCreateManyInput | Prisma.TeamMemberCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TeamMember createManyAndReturn
 */
export type TeamMemberCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * The data used to create many TeamMembers.
   */
  data: Prisma.TeamMemberCreateManyInput | Prisma.TeamMemberCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TeamMember update
 */
export type TeamMemberUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * The data needed to update a TeamMember.
   */
  data: Prisma.XOR<Prisma.TeamMemberUpdateInput, Prisma.TeamMemberUncheckedUpdateInput>
  /**
   * Choose, which TeamMember to update.
   */
  where: Prisma.TeamMemberWhereUniqueInput
}

/**
 * TeamMember updateMany
 */
export type TeamMemberUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TeamMembers.
   */
  data: Prisma.XOR<Prisma.TeamMemberUpdateManyMutationInput, Prisma.TeamMemberUncheckedUpdateManyInput>
  /**
   * Filter which TeamMembers to update
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * Limit how many TeamMembers to update.
   */
  limit?: number
}

/**
 * TeamMember updateManyAndReturn
 */
export type TeamMemberUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * The data used to update TeamMembers.
   */
  data: Prisma.XOR<Prisma.TeamMemberUpdateManyMutationInput, Prisma.TeamMemberUncheckedUpdateManyInput>
  /**
   * Filter which TeamMembers to update
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * Limit how many TeamMembers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TeamMember upsert
 */
export type TeamMemberUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * The filter to search for the TeamMember to update in case it exists.
   */
  where: Prisma.TeamMemberWhereUniqueInput
  /**
   * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
   */
  create: Prisma.XOR<Prisma.TeamMemberCreateInput, Prisma.TeamMemberUncheckedCreateInput>
  /**
   * In case the TeamMember was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TeamMemberUpdateInput, Prisma.TeamMemberUncheckedUpdateInput>
}

/**
 * TeamMember delete
 */
export type TeamMemberDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
  /**
   * Filter which TeamMember to delete.
   */
  where: Prisma.TeamMemberWhereUniqueInput
}

/**
 * TeamMember deleteMany
 */
export type TeamMemberDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TeamMembers to delete
   */
  where?: Prisma.TeamMemberWhereInput
  /**
   * Limit how many TeamMembers to delete.
   */
  limit?: number
}

/**
 * TeamMember without action
 */
export type TeamMemberDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TeamMember
   */
  select?: Prisma.TeamMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TeamMember
   */
  omit?: Prisma.TeamMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TeamMemberInclude<ExtArgs> | null
}
