/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestBImport } from './routes/test-b'
import { Route as TestAImport } from './routes/test-a'
import { Route as IndexImport } from './routes/index'
import { Route as TabIndexImport } from './routes/$tab/index'

// Create/Update Routes

const TestBRoute = TestBImport.update({
  id: '/test-b',
  path: '/test-b',
  getParentRoute: () => rootRoute,
} as any)

const TestARoute = TestAImport.update({
  id: '/test-a',
  path: '/test-a',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TabIndexRoute = TabIndexImport.update({
  id: '/$tab/',
  path: '/$tab/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/test-a': {
      id: '/test-a'
      path: '/test-a'
      fullPath: '/test-a'
      preLoaderRoute: typeof TestAImport
      parentRoute: typeof rootRoute
    }
    '/test-b': {
      id: '/test-b'
      path: '/test-b'
      fullPath: '/test-b'
      preLoaderRoute: typeof TestBImport
      parentRoute: typeof rootRoute
    }
    '/$tab/': {
      id: '/$tab/'
      path: '/$tab'
      fullPath: '/$tab'
      preLoaderRoute: typeof TabIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/test-a': typeof TestARoute
  '/test-b': typeof TestBRoute
  '/$tab': typeof TabIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/test-a': typeof TestARoute
  '/test-b': typeof TestBRoute
  '/$tab': typeof TabIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/test-a': typeof TestARoute
  '/test-b': typeof TestBRoute
  '/$tab/': typeof TabIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/test-a' | '/test-b' | '/$tab'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/test-a' | '/test-b' | '/$tab'
  id: '__root__' | '/' | '/test-a' | '/test-b' | '/$tab/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestARoute: typeof TestARoute
  TestBRoute: typeof TestBRoute
  TabIndexRoute: typeof TabIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestARoute: TestARoute,
  TestBRoute: TestBRoute,
  TabIndexRoute: TabIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/test-a",
        "/test-b",
        "/$tab/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/test-a": {
      "filePath": "test-a.tsx"
    },
    "/test-b": {
      "filePath": "test-b.tsx"
    },
    "/$tab/": {
      "filePath": "$tab/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
